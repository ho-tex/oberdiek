}\LONGTYPEOUT {
\STARTMESSAGE 
Don't change this file in any respect.
}
\LONGTYPEOUT #1->\begingroup \long \def \TYPE ##1{##1}\immediate \write 128{#1}\endgroup 
#1<-
\LONGTYPEOUT #1->\begingroup \long \def \TYPE ##1{##1}\immediate \write 128{#1}\endgroup 
#1<-
\STARTMESSAGE 
Don't change this file in any respect.
\STARTMESSAGE ->This is a generated file for the l3build validation system.
This is a generated file for the l3build validation system.
Don't change this file in any respect.
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\pdef \cmp {}
#2<-*\foo {}
\msg {->\immediate \write 16{
<<\ProtectedDef *\foo {}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param}{\protected \ProDef@long \def \foo }{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param
\ltx@secondoftwo #1#2->#2
#1<-\protected \ProDef@long \def \foo 
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param\endcsname 
\ProDef@long ->
\ProDef@param ->
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param}{\protected \ProDef@long \def \foo }{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param\endcsname }
#2<-
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\pdef \cmp {}
#2<-*\foo [0]{}
\msg {->\immediate \write 16{
<<\ProtectedDef *\foo [0]{}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[0]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param[0]}{\protected \ProDef@long \def \foo [0]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[0]\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param[0]
\ltx@secondoftwo #1#2->#2
#1<-\protected \ProDef@long \def \foo [0]
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[0]\endcsname 
\ProDef@long ->
\ProDef@param[0] ->
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[0]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param[0]}{\protected \ProDef@long \def \foo [0]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[0]\endcsname }
#2<-
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\pdef \cmp ##1{<##1>}
#2<-*\foo [1]{<##1>}
\msg {->\immediate \write 16{
<<\ProtectedDef *\foo [1]{<##1>}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[1]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param[1]}{\protected \ProDef@long \def \foo [1]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[1]\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param[1]
\ltx@secondoftwo #1#2->#2
#1<-\protected \ProDef@long \def \foo [1]
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[1]\endcsname 
\ProDef@long ->
\ProDef@param[1] ->##1
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[1]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param[1]}{\protected \ProDef@long \def \foo [1]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[1]\endcsname }
#2<-<##1>
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\pdef \cmp (##1){<##1>}
#2<-*\foo (##1){<##1>}
\msg {->\immediate \write 16{
<<\ProtectedDef *\foo (##1){<##1>}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-(##1)
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param(##1)}{\protected \ProDef@long \def \foo (##1)}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param(##1)\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param(##1)
\ltx@firstoftwo #1#2->#1
#1<-\protected \ProDef@long \def \foo (##1)
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param(##1)\endcsname 
\ProDef@long ->
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ltx@gobble #1->
#1<-*
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-(##1)
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param(##1)}{\protected \ProDef@long \def \foo (##1)}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param(##1)\endcsname }
#2<-<##1>
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\long \pdef \cmp {}
#2<-\foo {}
\msg {->\immediate \write 16{
<<\ProtectedDef \foo {}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param}{\protected \ProDef@long \def \foo }{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param
\ltx@secondoftwo #1#2->#2
#1<-\protected \ProDef@long \def \foo 
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param\endcsname 
\ProDef@param ->
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param}{\protected \ProDef@long \def \foo }{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param\endcsname }
#2<-
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\long \pdef \cmp {}
#2<-\foo [0]{}
\msg {->\immediate \write 16{
<<\ProtectedDef \foo [0]{}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[0]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param[0]}{\protected \ProDef@long \def \foo [0]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[0]\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param[0]
\ltx@secondoftwo #1#2->#2
#1<-\protected \ProDef@long \def \foo [0]
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[0]\endcsname 
\ProDef@param[0] ->
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[0]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param[0]}{\protected \ProDef@long \def \foo [0]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[0]\endcsname }
#2<-
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\long \pdef \cmp ##1{<##1>}
#2<-\foo [1]{<##1>}
\msg {->\immediate \write 16{
<<\ProtectedDef \foo [1]{<##1>}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[1]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param[1]}{\protected \ProDef@long \def \foo [1]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[1]\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param[1]
\ltx@secondoftwo #1#2->#2
#1<-\protected \ProDef@long \def \foo [1]
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[1]\endcsname 
\ProDef@param[1] ->##1
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-[1]
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param[1]}{\protected \ProDef@long \def \foo [1]}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param[1]\endcsname }
#2<-<##1>
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\BeginCheck #1\ProtectedDef #2\EndCheck ->\begingroup \toks 0={\ProtectedDef #2}\msg {<<\the \toks 0>>}\endgroup \setbox 0=\hbox {#1\ProtectedDef #2\check \foo }\ifdim \wd 0=0pt\relax \else \errmessage {[Definition] Unwanted spaces?!}\fi \setbox 0=\hbox {\def \fooinitial {XYZ}\let \foo \fooinitial \errcount =0 \expandafter \def \csname @PackageError\endcsname ##1##2##3{\advance \errcount by 1 }\expandafter \def \csname @notdefinable\endcsname {\advance \errcount by 1 }\ProtectedDef #2\ifnum \errcount =1 \else \errmessage {1 error expected, but found: \the \errcount }\fi \ifx \foo \fooinitial \else \def \space { }\errmessage {\string \foo \space is overwritten}\fi }\ifdim \wd 0=0pt\relax \else \errmessage {[Error] Unwanted spaces?!}\fi 
#1<-\long \pdef \cmp (##1){<##1>}
#2<-\foo (##1){<##1>}
\msg {->\immediate \write 16{
<<\ProtectedDef \foo (##1){<##1>}>>
\pdef ->\protected \def 
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-(##1)
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@ii \fi #1#2#3->\fi #2
#1<-\reserved@a 
#2<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#3<-\@notdefinable 
\reserved@a ->foo
\@carcube #1#2#3#4\@nil ->#1#2#3
#1<-f
#2<-o
#3<-o
#4<-xxx
\ProDef@next #1->#1
#1<-\ltx@IfUndefined {ProDef@param(##1)}{\protected \ProDef@long \def \foo (##1)}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param(##1)\endcsname }
\ltx@IfUndefined #1->\ifcsname #1\endcsname \expandafter \ifx \csname #1\endcsname \relax \expandafter \expandafter \expandafter \ltx@firstoftwo \else \expandafter \expandafter \expandafter \ltx@secondoftwo \fi \else \expandafter \ltx@firstoftwo \fi 
#1<-ProDef@param(##1)
\ltx@firstoftwo #1#2->#1
#1<-\protected \ProDef@long \def \foo (##1)
#2<-\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param(##1)\endcsname 
\check #1->\ifx \cmp #1\msg {* Test passed.}\else \msg {}\msg {[\meaning #1]}\msg {[\meaning \cmp ]}\errmessage {Test failed!}\fi 
#1<-\foo 
\msg {->\immediate \write 16{
* Test passed.
\ProtectedDef ->\ltx@ifnextchar *{\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble }{\let \ProDef@long \long \ProDef@ProtectedDef }
\ltx@ifnextchar #1#2#3->\begingroup \let \LTXcmds@CharToken = #1\relax \ltx@LocToksA {\endgroup #2}\ltx@LocToksB {\endgroup #3}\futurelet \LTXcmds@LetToken \LTXcmds@ifnextchar 
#1<-*
#2<-\let \ProDef@long \ltx@empty \expandafter \ProDef@ProtectedDef \ltx@gobble 
#3<-\let \ProDef@long \long \ProDef@ProtectedDef 
\LTXcmds@ifnextchar ->\ifx \LTXcmds@LetToken \LTXcmds@CharToken \the \expandafter \ltx@LocToksA \else \expandafter \ifx \csname LTXcmds@LetToken\endcsname \LTXcmds@SpaceToken \expandafter \expandafter \expandafter \LTXcmds@@ifnextchar \else \the \expandafter \expandafter \expandafter \ltx@LocToksB \fi \fi 
\ProDef@ProtectedDef #1#2{->\ProDef@IfDefinable {#1}{\ltx@IfUndefined {ProDef@param#2}{\protected \ProDef@long \def #1#2}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter #1\csname ProDef@param#2\endcsname }}{
#1<-\foo 
#2<-(##1)
\ProDef@IfDefinable #1->\let \ProDef@next \ltx@gobbletwo \@ifdefinable {#1}{\let \ProDef@next \ltx@firstofone }\ProDef@next 
#1<-\foo 
\@ifdefinable #1#2->\edef \reserved@a {\expandafter \@gobble \string #1}\@ifundefined \reserved@a {\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else #2\fi \fi }\@notdefinable 
#1<-\foo 
#2<-\let \ProDef@next \ltx@firstofone 
\@gobble #1->
#1<-\
\@ifundefined #1->\ifcsname #1\endcsname \@ifundefin@d@i \else \@ifundefin@d@ii \fi {#1}
#1<-\reserved@a 
\reserved@a ->foo
\@ifundefin@d@i #1\fi #2->\fi \expandafter \ifx \csname #2\endcsname \relax \@ifundefin@d@ii \fi \@secondoftwo 
#1<-\else \@ifundefin@d@ii 
#2<-\reserved@a 
\reserved@a ->foo
\@secondoftwo #1#2->#2
#1<-\edef \reserved@b {\expandafter \@carcube \reserved@a xxx\@nil }\ifx \reserved@b \@qend \@notdefinable \else \ifx \reserved@a \@qrelax \@notdefinable \else \let \ProDef@next \ltx@firstofone \fi \fi 
#2<-\@notdefinable 
\@notdefinable ->\advance \errcount by 1 
\ProDef@next #1#2->
#1<-\ltx@IfUndefined {ProDef@param(##1)}{\protected \ProDef@long \def \foo (##1)}{\protected \ProDef@long \expandafter \expandafter \expandafter \def \expandafter \expandafter \expandafter \foo \csname ProDef@param(##1)\endcsname }
#2<-<##1>
\par ->\scan_stop: \mode_if_horizontal:TF {\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}}\tex_par:D 
\mode_if_horizontal:TF ->\if_mode_horizontal: \__prg_TF_true:w \fi: \use_ii:nn 
\use_ii:nn #1#2->#2
#1<-\mode_if_inner:F {\tex_unskip:D \hook_use:n {para/end}\@kernel@after@para@end \mode_if_horizontal:TF {\if_int_compare:w 11=\tex_lastnodetype:D \tex_hskip:D \c_zero_dim \fi: \tex_par:D \hook_use:n {para/after}\@kernel@after@para@after }{\msg_error:nnnn {hooks}{para-mode}{end}{horizontal}}}
#2<-\tex_par:D 
\@@end ->\ifnum \currentgrouplevel >0 \LONGTYPEOUT {Bad grouping: \the \currentgrouplevel !}\fi \ifnum \currentiflevel >2 \LONGTYPEOUT {Bad conditionals: \the \numexpr \currentiflevel -2!}\fi \LONGTYPEOUT {
